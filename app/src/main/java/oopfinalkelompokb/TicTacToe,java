
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

// Tic-Tac-Toe

public class JavaFX extends Application
{
    // the fixed parameters

    public static final int BUTTON_SIZE = 50;
    public static final int GAME_SIZE = 500;

    // data members

    BorderPane mainGui;            // the final look of the game --  board in center, controls at bottom


    private GameCell[][] buttons;    // internal 2D array for having access to buttons
    private GridPane board;        // the "GUI" for showing the buttons in grid arrangement

    private HBox controlsPane;     // the non-game control buttons and
    private Button resetGame;      // and their single-row layout
    private Button undoMove;

    private Character playerTurn;  // keep track of whose turn it is, last button clicked, etc.

    // the methods

    // prepare the controls section of the GUI
    private void setupControls()
    {
	// create buttons
	resetGame = new Button("New Game");
	undoMove = new Button("Undo");

	// attach handlers, etc.
	ControlsHandler handler = new ControlsHandler();
	resetGame.setOnAction(handler);
	undoMove.setOnAction(handler);

	// place the buttons in their container
	controlsPane = new HBox();
	controlsPane.getChildren().add(resetGame);
	controlsPane.getChildren().add(undoMove);
    }

    // the handler that reacts to control buttons: New Game, Undo Move
    // could create separate handlers -- one for each botton
    private class ControlsHandler implements EventHandler<ActionEvent>
    {
	public void handle(ActionEvent event)
	{
	    // check which button triggerred the event and take action
	    if (event.getSource() == resetGame) {
		resetBoard();
	    }
	    else if (event.getSource() == undoMove) {
		// switch player and reset last button clicked
		// could add new data member -- lastMove
	    }
	}
    }

    // Inner class that represents the game buttons
    // * it is both a button
    // * and can handle its on actions
    // All buttons are replaced by GameCells
    public class GameCell extends Button implements EventHandler<ActionEvent>
    {
	// the location on the board
	private int row;
	private int col;
	
	public GameCell(int theRow, int theCol)
	{
	    super();
	    row = theRow;
	    col = theCol;
	    
	    // attach self as its own handler
	    ???
	}
	
	// here we out the code to handle the button click
	public void handle(ActionEvent event)
	{
	    // this code used to be in ButtonHandler
	    if (isGameOver(row, col)) {
		// announce winner if this is last move
		resetBoard();
	    }
	    else {
		// update the button -- disable it and indicate player's turn
		this.setDisable(true);
		
		// option 1: change the button text from blank to X or O
		// this.setText(playerTurn.toString());
		
		// option 2: put an image on the button
		ImageView icon = new ImageView("file:res/" + playerTurn + ".png");
		icon.setFitHeight(BUTTON_SIZE);
		icon.setFitWidth(BUTTON_SIZE);
		this.setGraphic(icon);
		
		// switch the current player
		playerTurn = playerTurn.equals('X') ? 'O' : 'X';
	    }
	}
    }
      
    // create all components need for the game, attach handlers
    private void setupBoard()
    {
	playerTurn = 'X';

	buttons = new Button[3][3];     //3x3 for storing my buttons
	board = new GridPane();         // the layout manager

	// NOT NEEDED since GameCell can handle its own events
	// ButtonHandler handler = new ButtonHandler();   // the red creature

	for (int r = 0; r < buttons.length; ++r) {
	    for (int c = 0; c < buttons[0].length; ++c) {
		GameCell curButton = new Button();

		// NOT NEEDED since attaching in constructor
		curButton.setOnAction(handler);       // attached creature

		curButton.setMinSize(BUTTON_SIZE, BUTTON_SIZE);         // restrict to 50x50
		curButton.setMaxSize(BUTTON_SIZE, BUTTON_SIZE);         // same min and max size

		buttons[r][c] = curButton;   // put in the 2D array
		board.add(curButton, c, r);  // put in the layout
	    }
	}
    }

    // used to start a new game -- clear all buttons and go back to X player
    private void resetBoard()
    {
	playerTurn = 'X';

	for (int r = 0; r < buttons.length; ++r) {
	    for (int c = 0; c < buttons[0].length; ++c) {
		Button curButton = buttons[r][c];
		curButton.setDisable(false);
		//curButton.setText("");
		curButton.setGraphic(null);
	    }
	}
    }

    // check if [r][0]..[r][2] or [0][c]..[2][c] or diagonals match
    private boolean isGameOver(int r, int c)
    {
	return false;
    }

    // NOT NEEDED since GameCells can handle their own events
    private class ButtonHandler implements EventHandler<ActionEvent>
    {
	public void handle(ActionEvent event)
	{
	    // this code moved to GameCell
	}
    }

    // initialize the game when the application first starts
    private void setupGame()			
    {
	setupBoard();
	setupControls();

	// the final look of the game --  board in center, controls at bottom
        mainGui = new BorderPane();

	board.setAlignment(Pos.CENTER);   // contents in board will be centered
	mainGui.setCenter(board);

	controlsPane.setAlignment(Pos.CENTER);                          // contents in HBox will always be centered
        BorderPane.setAlignment(controlsPane, Pos.BASELINE_CENTER);     // HBox will be centered in own container
	mainGui.setBottom(controlsPane);
    }    
				    
    // required method for classes that inherit from Application
    // need to override, since abstract in Application class
    public void start(Stage stage)
    {
 	// initialize the game when the application first starts
	setupGame();

	// prepare the scene
	Scene scene = new Scene(mainGui, GAME_SIZE, GAME_SIZE);

	// put the scene on a stage and show the stage to the players
	stage.setTitle("Tic Tac Toe");
	stage.setScene(scene);           // put the scene on stage
	stage.show();
    }

    public static void main(String[] args) {
      launch(args);
    }
}
